// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: types.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//财富+道具类型,小于等于1000预留、普通道具从1001开始
type PropType int32

const (
	PropType_Ankt               PropType = 1
	PropType_Lvs                PropType = 2
	PropType_Score              PropType = 3
	PropType_Gold               PropType = 4
	PropType_MaxWealthId        PropType = 1000
	PropType_AvisStone          PropType = 1001
	PropType_CloudStone         PropType = 1002
	PropType_ArosStone          PropType = 1003
	PropType_CycloniusStone     PropType = 1004
	PropType_FluvisStone        PropType = 1005
	PropType_SalisStone         PropType = 1006
	PropType_HayleStone         PropType = 1007
	PropType_NeptulusStone      PropType = 1008
	PropType_SigmeStone         PropType = 1009
	PropType_AsheStone          PropType = 1010
	PropType_PyreStone          PropType = 1011
	PropType_FernisStone        PropType = 1012
	PropType_TeraStone          PropType = 1013
	PropType_ClayeStone         PropType = 1014
	PropType_LiosStone          PropType = 1015
	PropType_GeodStone          PropType = 1016
	PropType_WrathSpirit        PropType = 2001
	PropType_PatienceSpirit     PropType = 2002
	PropType_ReticenceSpirit    PropType = 2003
	PropType_PietySpirit        PropType = 2004
	PropType_SlothSpirit        PropType = 2005
	PropType_EnvySpirit         PropType = 2006
	PropType_PacifismSpirit     PropType = 2007
	PropType_FaithSpirit        PropType = 2008
	PropType_GluttonySpirit     PropType = 2009
	PropType_PrideSpirit        PropType = 2010
	PropType_TruthSpirit        PropType = 2011
	PropType_ReposeSpirit       PropType = 2012
	PropType_LustSpirit         PropType = 2013
	PropType_FearSpirit         PropType = 2014
	PropType_PuritySpirit       PropType = 2015
	PropType_SelflessnessSpirit PropType = 2016
	PropType_Energy             PropType = 3001
)

// Enum value maps for PropType.
var (
	PropType_name = map[int32]string{
		1:    "Ankt",
		2:    "Lvs",
		3:    "Score",
		4:    "Gold",
		1000: "MaxWealthId",
		1001: "AvisStone",
		1002: "CloudStone",
		1003: "ArosStone",
		1004: "CycloniusStone",
		1005: "FluvisStone",
		1006: "SalisStone",
		1007: "HayleStone",
		1008: "NeptulusStone",
		1009: "SigmeStone",
		1010: "AsheStone",
		1011: "PyreStone",
		1012: "FernisStone",
		1013: "TeraStone",
		1014: "ClayeStone",
		1015: "LiosStone",
		1016: "GeodStone",
		2001: "WrathSpirit",
		2002: "PatienceSpirit",
		2003: "ReticenceSpirit",
		2004: "PietySpirit",
		2005: "SlothSpirit",
		2006: "EnvySpirit",
		2007: "PacifismSpirit",
		2008: "FaithSpirit",
		2009: "GluttonySpirit",
		2010: "PrideSpirit",
		2011: "TruthSpirit",
		2012: "ReposeSpirit",
		2013: "LustSpirit",
		2014: "FearSpirit",
		2015: "PuritySpirit",
		2016: "SelflessnessSpirit",
		3001: "Energy",
	}
	PropType_value = map[string]int32{
		"Ankt":               1,
		"Lvs":                2,
		"Score":              3,
		"Gold":               4,
		"MaxWealthId":        1000,
		"AvisStone":          1001,
		"CloudStone":         1002,
		"ArosStone":          1003,
		"CycloniusStone":     1004,
		"FluvisStone":        1005,
		"SalisStone":         1006,
		"HayleStone":         1007,
		"NeptulusStone":      1008,
		"SigmeStone":         1009,
		"AsheStone":          1010,
		"PyreStone":          1011,
		"FernisStone":        1012,
		"TeraStone":          1013,
		"ClayeStone":         1014,
		"LiosStone":          1015,
		"GeodStone":          1016,
		"WrathSpirit":        2001,
		"PatienceSpirit":     2002,
		"ReticenceSpirit":    2003,
		"PietySpirit":        2004,
		"SlothSpirit":        2005,
		"EnvySpirit":         2006,
		"PacifismSpirit":     2007,
		"FaithSpirit":        2008,
		"GluttonySpirit":     2009,
		"PrideSpirit":        2010,
		"TruthSpirit":        2011,
		"ReposeSpirit":       2012,
		"LustSpirit":         2013,
		"FearSpirit":         2014,
		"PuritySpirit":       2015,
		"SelflessnessSpirit": 2016,
		"Energy":             3001,
	}
)

func (x PropType) Enum() *PropType {
	p := new(PropType)
	*p = x
	return p
}

func (x PropType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (PropType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x PropType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PropType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PropType(num)
	return nil
}

// Deprecated: Use PropType.Descriptor instead.
func (PropType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

type ActionType int32

const (
	ActionType_Add      ActionType = 1 //增
	ActionType_Delete   ActionType = 2 //删
	ActionType_Update   ActionType = 3 //改
	ActionType_Get      ActionType = 4 //查
	ActionType_Up       ActionType = 5 //上
	ActionType_Down     ActionType = 6 //下
	ActionType_Forward  ActionType = 7 //向前
	ActionType_Backward ActionType = 8 //向后
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		1: "Add",
		2: "Delete",
		3: "Update",
		4: "Get",
		5: "Up",
		6: "Down",
		7: "Forward",
		8: "Backward",
	}
	ActionType_value = map[string]int32{
		"Add":      1,
		"Delete":   2,
		"Update":   3,
		"Get":      4,
		"Up":       5,
		"Down":     6,
		"Forward":  7,
		"Backward": 8,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionType(num)
	return nil
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

type ActionErrCode int32

const (
	ActionErrCode_Success         ActionErrCode = 0  //操作成功
	ActionErrCode_IllegalUser     ActionErrCode = 1  //非法访问
	ActionErrCode_ParamError      ActionErrCode = 2  //参数异常
	ActionErrCode_ServerError     ActionErrCode = 3  //服务异常
	ActionErrCode_UpperLimit      ActionErrCode = 4  //已达上限
	ActionErrCode_LowerLimit      ActionErrCode = 5  //没有更多了
	ActionErrCode_HasExist        ActionErrCode = 6  //目标已存在
	ActionErrCode_NotExist        ActionErrCode = 7  //目标不存在
	ActionErrCode_HasUsed         ActionErrCode = 8  //已使用
	ActionErrCode_NotUsed         ActionErrCode = 9  //未使用
	ActionErrCode_TooFrequently   ActionErrCode = 10 //操作过于频繁
	ActionErrCode_ChargeTypeError ActionErrCode = 11 //charge类型不匹配
	ActionErrCode_NoNeedUpdate    ActionErrCode = 12 //没有修改
	ActionErrCode_HasFinished     ActionErrCode = 13 //已完成
	ActionErrCode_NotFinished     ActionErrCode = 14 //未完成
)

// Enum value maps for ActionErrCode.
var (
	ActionErrCode_name = map[int32]string{
		0:  "Success",
		1:  "IllegalUser",
		2:  "ParamError",
		3:  "ServerError",
		4:  "UpperLimit",
		5:  "LowerLimit",
		6:  "HasExist",
		7:  "NotExist",
		8:  "HasUsed",
		9:  "NotUsed",
		10: "TooFrequently",
		11: "ChargeTypeError",
		12: "NoNeedUpdate",
		13: "HasFinished",
		14: "NotFinished",
	}
	ActionErrCode_value = map[string]int32{
		"Success":         0,
		"IllegalUser":     1,
		"ParamError":      2,
		"ServerError":     3,
		"UpperLimit":      4,
		"LowerLimit":      5,
		"HasExist":        6,
		"NotExist":        7,
		"HasUsed":         8,
		"NotUsed":         9,
		"TooFrequently":   10,
		"ChargeTypeError": 11,
		"NoNeedUpdate":    12,
		"HasFinished":     13,
		"NotFinished":     14,
	}
)

func (x ActionErrCode) Enum() *ActionErrCode {
	p := new(ActionErrCode)
	*p = x
	return p
}

func (x ActionErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (ActionErrCode) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x ActionErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionErrCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionErrCode(num)
	return nil
}

// Deprecated: Use ActionErrCode.Descriptor instead.
func (ActionErrCode) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

type BaseUserInfo_UserType int32

const (
	BaseUserInfo_Normal BaseUserInfo_UserType = 0  //正常类型
	BaseUserInfo_Robot  BaseUserInfo_UserType = 10 //机器人
)

// Enum value maps for BaseUserInfo_UserType.
var (
	BaseUserInfo_UserType_name = map[int32]string{
		0:  "Normal",
		10: "Robot",
	}
	BaseUserInfo_UserType_value = map[string]int32{
		"Normal": 0,
		"Robot":  10,
	}
)

func (x BaseUserInfo_UserType) Enum() *BaseUserInfo_UserType {
	p := new(BaseUserInfo_UserType)
	*p = x
	return p
}

func (x BaseUserInfo_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseUserInfo_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[3].Descriptor()
}

func (BaseUserInfo_UserType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[3]
}

func (x BaseUserInfo_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BaseUserInfo_UserType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BaseUserInfo_UserType(num)
	return nil
}

// Deprecated: Use BaseUserInfo_UserType.Descriptor instead.
func (BaseUserInfo_UserType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3, 0}
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Info *string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorInfo) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ErrorInfo) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

type PropItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropId    *PropType `protobuf:"varint,1,opt,name=prop_id,json=propId,enum=bs.types.PropType" json:"prop_id,omitempty"` //道具从1001开始，1=ankt、2=lvs、3=score、4=gold
	PropCount *int64    `protobuf:"varint,2,opt,name=prop_count,json=propCount" json:"prop_count,omitempty"`
	SeasonId  *uint64   `protobuf:"varint,3,opt,name=season_id,json=seasonId" json:"season_id,omitempty"` //赛季Id
}

func (x *PropItem) Reset() {
	*x = PropItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropItem) ProtoMessage() {}

func (x *PropItem) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropItem.ProtoReflect.Descriptor instead.
func (*PropItem) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *PropItem) GetPropId() PropType {
	if x != nil && x.PropId != nil {
		return *x.PropId
	}
	return PropType_Ankt
}

func (x *PropItem) GetPropCount() int64 {
	if x != nil && x.PropCount != nil {
		return *x.PropCount
	}
	return 0
}

func (x *PropItem) GetSeasonId() uint64 {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return 0
}

type BaseAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type    *uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Id      *uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Version *uint32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (x *BaseAppInfo) Reset() {
	*x = BaseAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseAppInfo) ProtoMessage() {}

func (x *BaseAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseAppInfo.ProtoReflect.Descriptor instead.
func (*BaseAppInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *BaseAppInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BaseAppInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BaseAppInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BaseAppInfo) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type BaseUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account      *string                `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`                                                        //用户账号
	UserId       *uint64                `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`                                           //用户ID
	GameId       *uint64                `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id,omitempty"`                                           //数字ID
	Gender       *uint32                `protobuf:"varint,4,opt,name=gender" json:"gender,omitempty"`                                                         //性别
	FaceId       *uint32                `protobuf:"varint,5,opt,name=face_id,json=faceId" json:"face_id,omitempty"`                                           //头像id
	CustomFace   *string                `protobuf:"bytes,6,opt,name=custom_face,json=customFace" json:"custom_face,omitempty"`                                //自定义的图像地址
	NickName     *string                `protobuf:"bytes,7,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`                                      //昵称
	UserType     *BaseUserInfo_UserType `protobuf:"varint,8,opt,name=user_type,json=userType,enum=bs.types.BaseUserInfo_UserType" json:"user_type,omitempty"` //用户类别
	UserProps    []*PropItem            `protobuf:"bytes,9,rep,name=user_props,json=userProps" json:"user_props,omitempty"`                                   //用户道具
	MarketId     *uint32                `protobuf:"varint,10,opt,name=market_id,json=marketId" json:"market_id,omitempty"`                                    //登录主渠道
	SiteId       *uint32                `protobuf:"varint,11,opt,name=site_id,json=siteId" json:"site_id,omitempty"`                                          //登录子渠道
	RegMarketId  *uint32                `protobuf:"varint,12,opt,name=reg_market_id,json=regMarketId" json:"reg_market_id,omitempty"`                         //注册主渠道
	RegSiteId    *uint32                `protobuf:"varint,13,opt,name=reg_site_id,json=regSiteId" json:"reg_site_id,omitempty"`                               //注册子渠道
	RegisterData *string                `protobuf:"bytes,14,opt,name=register_data,json=registerData" json:"register_data,omitempty"`                         //注册时间
	GateConnid   *uint64                `protobuf:"varint,15,opt,name=gate_connid,json=gateConnid" json:"gate_connid,omitempty"`                              //关联的gate连接id
	LogicAppId   *uint32                `protobuf:"varint,16,opt,name=logic_app_id,json=logicAppId" json:"logic_app_id,omitempty"`                            //关联logic
}

func (x *BaseUserInfo) Reset() {
	*x = BaseUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUserInfo) ProtoMessage() {}

func (x *BaseUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUserInfo.ProtoReflect.Descriptor instead.
func (*BaseUserInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *BaseUserInfo) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *BaseUserInfo) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *BaseUserInfo) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *BaseUserInfo) GetGender() uint32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *BaseUserInfo) GetFaceId() uint32 {
	if x != nil && x.FaceId != nil {
		return *x.FaceId
	}
	return 0
}

func (x *BaseUserInfo) GetCustomFace() string {
	if x != nil && x.CustomFace != nil {
		return *x.CustomFace
	}
	return ""
}

func (x *BaseUserInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *BaseUserInfo) GetUserType() BaseUserInfo_UserType {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return BaseUserInfo_Normal
}

func (x *BaseUserInfo) GetUserProps() []*PropItem {
	if x != nil {
		return x.UserProps
	}
	return nil
}

func (x *BaseUserInfo) GetMarketId() uint32 {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return 0
}

func (x *BaseUserInfo) GetSiteId() uint32 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

func (x *BaseUserInfo) GetRegMarketId() uint32 {
	if x != nil && x.RegMarketId != nil {
		return *x.RegMarketId
	}
	return 0
}

func (x *BaseUserInfo) GetRegSiteId() uint32 {
	if x != nil && x.RegSiteId != nil {
		return *x.RegSiteId
	}
	return 0
}

func (x *BaseUserInfo) GetRegisterData() string {
	if x != nil && x.RegisterData != nil {
		return *x.RegisterData
	}
	return ""
}

func (x *BaseUserInfo) GetGateConnid() uint64 {
	if x != nil && x.GateConnid != nil {
		return *x.GateConnid
	}
	return 0
}

func (x *BaseUserInfo) GetLogicAppId() uint32 {
	if x != nil && x.LogicAppId != nil {
		return *x.LogicAppId
	}
	return 0
}

type LogicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppInfo *BaseAppInfo `protobuf:"bytes,1,opt,name=app_info,json=appInfo" json:"app_info,omitempty"`
	State   *int32       `protobuf:"varint,2,opt,name=state" json:"state,omitempty"` //状态
}

func (x *LogicInfo) Reset() {
	*x = LogicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicInfo) ProtoMessage() {}

func (x *LogicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicInfo.ProtoReflect.Descriptor instead.
func (*LogicInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *LogicInfo) GetAppInfo() *BaseAppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *LogicInfo) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

//身体部件
type PetBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAtt *uint32 `protobuf:"varint,1,opt,name=base_att,json=baseAtt" json:"base_att,omitempty"`
	Level   *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *PetBody) Reset() {
	*x = PetBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetBody) ProtoMessage() {}

func (x *PetBody) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetBody.ProtoReflect.Descriptor instead.
func (*PetBody) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *PetBody) GetBaseAtt() uint32 {
	if x != nil && x.BaseAtt != nil {
		return *x.BaseAtt
	}
	return 0
}

func (x *PetBody) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

//宠物性格
type PetCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAtt *uint32 `protobuf:"varint,1,opt,name=base_att,json=baseAtt" json:"base_att,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *PetCharacter) Reset() {
	*x = PetCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetCharacter) ProtoMessage() {}

func (x *PetCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetCharacter.ProtoReflect.Descriptor instead.
func (*PetCharacter) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *PetCharacter) GetBaseAtt() uint32 {
	if x != nil && x.BaseAtt != nil {
		return *x.BaseAtt
	}
	return 0
}

func (x *PetCharacter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

//增减益
type BuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffId         *uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId" json:"buff_id,omitempty"`             //ID
	Type           *uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`                               //加成类型
	Value          *uint32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`                             //加成值
	ValueScale     *uint32 `protobuf:"varint,4,opt,name=value_scale,json=valueScale" json:"value_scale,omitempty"` //加成值缩放比
	ConditionType  *uint32 `protobuf:"varint,5,opt,name=ConditionType" json:"ConditionType,omitempty"`             //使用条件类型
	ConditionValue *uint32 `protobuf:"varint,6,opt,name=ConditionValue" json:"ConditionValue,omitempty"`           //使用条件值
}

func (x *BuffInfo) Reset() {
	*x = BuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfo) ProtoMessage() {}

func (x *BuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfo.ProtoReflect.Descriptor instead.
func (*BuffInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *BuffInfo) GetBuffId() uint32 {
	if x != nil && x.BuffId != nil {
		return *x.BuffId
	}
	return 0
}

func (x *BuffInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BuffInfo) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *BuffInfo) GetValueScale() uint32 {
	if x != nil && x.ValueScale != nil {
		return *x.ValueScale
	}
	return 0
}

func (x *BuffInfo) GetConditionType() uint32 {
	if x != nil && x.ConditionType != nil {
		return *x.ConditionType
	}
	return 0
}

func (x *BuffInfo) GetConditionValue() uint32 {
	if x != nil && x.ConditionValue != nil {
		return *x.ConditionValue
	}
	return 0
}

//装备
type EquipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipId *uint64     `protobuf:"varint,1,opt,name=equip_id,json=equipId" json:"equip_id,omitempty"` //唯一ID
	Charge  *uint32     `protobuf:"varint,2,opt,name=charge" json:"charge,omitempty"`                  //2金币 3chain
	PetId   *uint64     `protobuf:"varint,3,opt,name=pet_id,json=petId" json:"pet_id,omitempty"`       //被装备的宿主宠物ID 为空或为0表示未装备
	BaseAtt *uint32     `protobuf:"varint,4,opt,name=base_att,json=baseAtt" json:"base_att,omitempty"` //属性
	Quality *uint32     `protobuf:"varint,5,opt,name=quality" json:"quality,omitempty"`                //品质等级
	Buffs   []*BuffInfo `protobuf:"bytes,6,rep,name=buffs" json:"buffs,omitempty"`                     //加成
	Pos     *uint32     `protobuf:"varint,7,opt,name=pos" json:"pos,omitempty"`                        //放置在对应装备栏的位置 从0开始 仅在被装备在宠物身上时生效
}

func (x *EquipInfo) Reset() {
	*x = EquipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipInfo) ProtoMessage() {}

func (x *EquipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipInfo.ProtoReflect.Descriptor instead.
func (*EquipInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *EquipInfo) GetEquipId() uint64 {
	if x != nil && x.EquipId != nil {
		return *x.EquipId
	}
	return 0
}

func (x *EquipInfo) GetCharge() uint32 {
	if x != nil && x.Charge != nil {
		return *x.Charge
	}
	return 0
}

func (x *EquipInfo) GetPetId() uint64 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *EquipInfo) GetBaseAtt() uint32 {
	if x != nil && x.BaseAtt != nil {
		return *x.BaseAtt
	}
	return 0
}

func (x *EquipInfo) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *EquipInfo) GetBuffs() []*BuffInfo {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *EquipInfo) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

type PetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId               *uint64       `protobuf:"varint,1,opt,name=pet_id,json=petId" json:"pet_id,omitempty"`                                              //ID
	Charge              *uint32       `protobuf:"varint,2,opt,name=charge" json:"charge,omitempty"`                                                         //2金币 3chain
	BaseAtt             *uint32       `protobuf:"varint,3,opt,name=base_att,json=baseAtt" json:"base_att,omitempty"`                                        //1风 2水 3火 4土
	BaseType            *uint32       `protobuf:"varint,4,opt,name=base_type,json=baseType" json:"base_type,omitempty"`                                     //1物理 2魔法
	Level               *uint32       `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`                                                           //等级
	Horn                *PetBody      `protobuf:"bytes,6,opt,name=horn" json:"horn,omitempty"`                                                              //角
	Eye                 *PetBody      `protobuf:"bytes,7,opt,name=eye" json:"eye,omitempty"`                                                                //眼睛
	Wing                *PetBody      `protobuf:"bytes,8,opt,name=wing" json:"wing,omitempty"`                                                              //翅膀
	Tail                *PetBody      `protobuf:"bytes,9,opt,name=tail" json:"tail,omitempty"`                                                              //尾巴
	Character           *PetCharacter `protobuf:"bytes,10,opt,name=character" json:"character,omitempty"`                                                   //性格
	BloodCount          *uint64       `protobuf:"varint,11,opt,name=blood_count,json=bloodCount" json:"blood_count,omitempty"`                              // 生命值
	PhysicalAttack      *uint64       `protobuf:"varint,12,opt,name=physical_attack,json=physicalAttack" json:"physical_attack,omitempty"`                  // 物理攻击力
	MagicAttack         *uint64       `protobuf:"varint,13,opt,name=magic_attack,json=magicAttack" json:"magic_attack,omitempty"`                           // 魔法攻击力
	PhysicalDefense     *uint64       `protobuf:"varint,14,opt,name=physical_defense,json=physicalDefense" json:"physical_defense,omitempty"`               // 物理防御力
	MagicDefense        *uint64       `protobuf:"varint,15,opt,name=magic_defense,json=magicDefense" json:"magic_defense,omitempty"`                        // 魔法防御力
	AttackSpeed         *uint64       `protobuf:"varint,16,opt,name=attack_speed,json=attackSpeed" json:"attack_speed,omitempty"`                           // 攻击速度
	WindDefensePercent  *int32        `protobuf:"varint,17,opt,name=wind_defense_percent,json=windDefensePercent" json:"wind_defense_percent,omitempty"`    // 风抗万分比提高
	WaterDefensePercent *int32        `protobuf:"varint,18,opt,name=water_defense_percent,json=waterDefensePercent" json:"water_defense_percent,omitempty"` // 水抗万分比提高
	FireDefensePercent  *int32        `protobuf:"varint,19,opt,name=fire_defense_percent,json=fireDefensePercent" json:"fire_defense_percent,omitempty"`    // 火抗万分比提高
	DustDefensePercent  *int32        `protobuf:"varint,20,opt,name=dust_defense_percent,json=dustDefensePercent" json:"dust_defense_percent,omitempty"`    // 土抗万分比提高
	Equips              []*EquipInfo  `protobuf:"bytes,21,rep,name=equips" json:"equips,omitempty"`                                                         // 装备列表
	State               *int32        `protobuf:"varint,22,opt,name=state" json:"state,omitempty"`                                                          // 宠物状态 0空闲 1战斗 2探险
}

func (x *PetInfo) Reset() {
	*x = PetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetInfo) ProtoMessage() {}

func (x *PetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetInfo.ProtoReflect.Descriptor instead.
func (*PetInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *PetInfo) GetPetId() uint64 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *PetInfo) GetCharge() uint32 {
	if x != nil && x.Charge != nil {
		return *x.Charge
	}
	return 0
}

func (x *PetInfo) GetBaseAtt() uint32 {
	if x != nil && x.BaseAtt != nil {
		return *x.BaseAtt
	}
	return 0
}

func (x *PetInfo) GetBaseType() uint32 {
	if x != nil && x.BaseType != nil {
		return *x.BaseType
	}
	return 0
}

func (x *PetInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PetInfo) GetHorn() *PetBody {
	if x != nil {
		return x.Horn
	}
	return nil
}

func (x *PetInfo) GetEye() *PetBody {
	if x != nil {
		return x.Eye
	}
	return nil
}

func (x *PetInfo) GetWing() *PetBody {
	if x != nil {
		return x.Wing
	}
	return nil
}

func (x *PetInfo) GetTail() *PetBody {
	if x != nil {
		return x.Tail
	}
	return nil
}

func (x *PetInfo) GetCharacter() *PetCharacter {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *PetInfo) GetBloodCount() uint64 {
	if x != nil && x.BloodCount != nil {
		return *x.BloodCount
	}
	return 0
}

func (x *PetInfo) GetPhysicalAttack() uint64 {
	if x != nil && x.PhysicalAttack != nil {
		return *x.PhysicalAttack
	}
	return 0
}

func (x *PetInfo) GetMagicAttack() uint64 {
	if x != nil && x.MagicAttack != nil {
		return *x.MagicAttack
	}
	return 0
}

func (x *PetInfo) GetPhysicalDefense() uint64 {
	if x != nil && x.PhysicalDefense != nil {
		return *x.PhysicalDefense
	}
	return 0
}

func (x *PetInfo) GetMagicDefense() uint64 {
	if x != nil && x.MagicDefense != nil {
		return *x.MagicDefense
	}
	return 0
}

func (x *PetInfo) GetAttackSpeed() uint64 {
	if x != nil && x.AttackSpeed != nil {
		return *x.AttackSpeed
	}
	return 0
}

func (x *PetInfo) GetWindDefensePercent() int32 {
	if x != nil && x.WindDefensePercent != nil {
		return *x.WindDefensePercent
	}
	return 0
}

func (x *PetInfo) GetWaterDefensePercent() int32 {
	if x != nil && x.WaterDefensePercent != nil {
		return *x.WaterDefensePercent
	}
	return 0
}

func (x *PetInfo) GetFireDefensePercent() int32 {
	if x != nil && x.FireDefensePercent != nil {
		return *x.FireDefensePercent
	}
	return 0
}

func (x *PetInfo) GetDustDefensePercent() int32 {
	if x != nil && x.DustDefensePercent != nil {
		return *x.DustDefensePercent
	}
	return 0
}

func (x *PetInfo) GetEquips() []*EquipInfo {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *PetInfo) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type PetPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId *uint64 `protobuf:"varint,1,opt,name=pet_id,json=petId" json:"pet_id,omitempty"`
	X     *int32  `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
	Y     *int32  `protobuf:"varint,3,opt,name=y" json:"y,omitempty"`
}

func (x *PetPoint) Reset() {
	*x = PetPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetPoint) ProtoMessage() {}

func (x *PetPoint) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetPoint.ProtoReflect.Descriptor instead.
func (*PetPoint) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *PetPoint) GetPetId() uint64 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *PetPoint) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *PetPoint) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type PetTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name           *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CreateTime     *int64      `protobuf:"varint,3,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	LastChangeTime *int64      `protobuf:"varint,4,opt,name=last_change_time,json=lastChangeTime" json:"last_change_time,omitempty"`
	PetPoints      []*PetPoint `protobuf:"bytes,5,rep,name=pet_points,json=petPoints" json:"pet_points,omitempty"`
}

func (x *PetTeam) Reset() {
	*x = PetTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetTeam) ProtoMessage() {}

func (x *PetTeam) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetTeam.ProtoReflect.Descriptor instead.
func (*PetTeam) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *PetTeam) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PetTeam) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PetTeam) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *PetTeam) GetLastChangeTime() int64 {
	if x != nil && x.LastChangeTime != nil {
		return *x.LastChangeTime
	}
	return 0
}

func (x *PetTeam) GetPetPoints() []*PetPoint {
	if x != nil {
		return x.PetPoints
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62,
	0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x73, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x5f, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xbf, 0x04, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x65, 0x67,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x67, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x22, 0x21, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x10, 0x0a, 0x22, 0x53, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x07, 0x50, 0x65, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3d, 0x0a, 0x0c, 0x50, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xc3, 0x06, 0x0a,
	0x07, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x41,
	0x74, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x68, 0x6f, 0x72, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x68, 0x6f, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x03,
	0x65, 0x79, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x73, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x03, 0x65, 0x79,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x34, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x77, 0x61, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x69, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x75, 0x73,
	0x74, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x3d, 0x0a, 0x08, 0x50, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x70, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x70, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x79, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x70, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2a,
	0x96, 0x05, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x41, 0x6e, 0x6b, 0x74, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x76, 0x73, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x6f,
	0x6c, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x57, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x49, 0x64, 0x10, 0xe8, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x76, 0x69, 0x73, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x10, 0xe9, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x10, 0xea, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x72, 0x6f, 0x73, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x10, 0xeb, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x79, 0x63, 0x6c, 0x6f,
	0x6e, 0x69, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0xec, 0x07, 0x12, 0x10, 0x0a, 0x0b,
	0x46, 0x6c, 0x75, 0x76, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0xed, 0x07, 0x12, 0x0f,
	0x0a, 0x0a, 0x53, 0x61, 0x6c, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0xee, 0x07, 0x12,
	0x0f, 0x0a, 0x0a, 0x48, 0x61, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0xef, 0x07,
	0x12, 0x12, 0x0a, 0x0d, 0x4e, 0x65, 0x70, 0x74, 0x75, 0x6c, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x6e,
	0x65, 0x10, 0xf0, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6d, 0x65, 0x53, 0x74, 0x6f,
	0x6e, 0x65, 0x10, 0xf1, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x73, 0x68, 0x65, 0x53, 0x74, 0x6f,
	0x6e, 0x65, 0x10, 0xf2, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x50, 0x79, 0x72, 0x65, 0x53, 0x74, 0x6f,
	0x6e, 0x65, 0x10, 0xf3, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x46, 0x65, 0x72, 0x6e, 0x69, 0x73, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x10, 0xf4, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x61, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x10, 0xf5, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x79, 0x65,
	0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0xf6, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x69, 0x6f, 0x73,
	0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0xf7, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0xf8, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x57, 0x72, 0x61, 0x74,
	0x68, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xd1, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xd2, 0x0f, 0x12,
	0x14, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x69, 0x72,
	0x69, 0x74, 0x10, 0xd3, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x69, 0x65, 0x74, 0x79, 0x53, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x10, 0xd4, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x6c, 0x6f, 0x74, 0x68,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xd5, 0x0f, 0x12, 0x0f, 0x0a, 0x0a, 0x45, 0x6e, 0x76,
	0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xd6, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x61,
	0x63, 0x69, 0x66, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xd7, 0x0f, 0x12,
	0x10, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x74, 0x68, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xd8,
	0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x6c, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x79, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x10, 0xd9, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x64, 0x65, 0x53,
	0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xda, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x74,
	0x68, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xdb, 0x0f, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xdc, 0x0f, 0x12, 0x0f, 0x0a,
	0x0a, 0x4c, 0x75, 0x73, 0x74, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xdd, 0x0f, 0x12, 0x0f,
	0x0a, 0x0a, 0x46, 0x65, 0x61, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xde, 0x0f, 0x12,
	0x11, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10,
	0xdf, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x66, 0x6c, 0x65, 0x73, 0x73, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0xe0, 0x0f, 0x12, 0x0b, 0x0a, 0x06, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x10, 0xb9, 0x17, 0x2a, 0x63, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x55, 0x70, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x10, 0x08, 0x2a, 0x80, 0x02,
	0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x48, 0x61, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x6f, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x6f, 0x4e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0c, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x61, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x0d, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x0e,
	0x42, 0x18, 0x5a, 0x16, 0x61, 0x6e, 0x6b, 0x6f, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_types_proto_goTypes = []interface{}{
	(PropType)(0),              // 0: bs.types.PropType
	(ActionType)(0),            // 1: bs.types.ActionType
	(ActionErrCode)(0),         // 2: bs.types.ActionErrCode
	(BaseUserInfo_UserType)(0), // 3: bs.types.BaseUserInfo.UserType
	(*ErrorInfo)(nil),          // 4: bs.types.ErrorInfo
	(*PropItem)(nil),           // 5: bs.types.PropItem
	(*BaseAppInfo)(nil),        // 6: bs.types.BaseAppInfo
	(*BaseUserInfo)(nil),       // 7: bs.types.BaseUserInfo
	(*LogicInfo)(nil),          // 8: bs.types.LogicInfo
	(*PetBody)(nil),            // 9: bs.types.PetBody
	(*PetCharacter)(nil),       // 10: bs.types.PetCharacter
	(*BuffInfo)(nil),           // 11: bs.types.BuffInfo
	(*EquipInfo)(nil),          // 12: bs.types.EquipInfo
	(*PetInfo)(nil),            // 13: bs.types.PetInfo
	(*PetPoint)(nil),           // 14: bs.types.PetPoint
	(*PetTeam)(nil),            // 15: bs.types.PetTeam
}
var file_types_proto_depIdxs = []int32{
	0,  // 0: bs.types.PropItem.prop_id:type_name -> bs.types.PropType
	3,  // 1: bs.types.BaseUserInfo.user_type:type_name -> bs.types.BaseUserInfo.UserType
	5,  // 2: bs.types.BaseUserInfo.user_props:type_name -> bs.types.PropItem
	6,  // 3: bs.types.LogicInfo.app_info:type_name -> bs.types.BaseAppInfo
	11, // 4: bs.types.EquipInfo.buffs:type_name -> bs.types.BuffInfo
	9,  // 5: bs.types.PetInfo.horn:type_name -> bs.types.PetBody
	9,  // 6: bs.types.PetInfo.eye:type_name -> bs.types.PetBody
	9,  // 7: bs.types.PetInfo.wing:type_name -> bs.types.PetBody
	9,  // 8: bs.types.PetInfo.tail:type_name -> bs.types.PetBody
	10, // 9: bs.types.PetInfo.character:type_name -> bs.types.PetCharacter
	12, // 10: bs.types.PetInfo.equips:type_name -> bs.types.EquipInfo
	14, // 11: bs.types.PetTeam.pet_points:type_name -> bs.types.PetPoint
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
